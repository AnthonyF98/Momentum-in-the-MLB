df <- read.csv("C:/Users/antfe/OneDrive/Customer Engagement/tivo_case.csv)
df <- read.csv("C:/Users/antfe/OneDrive/Customer Engagement/tivo_case.csv")
library(dplyr)
df <- read.csv("C:/Users/antfe/OneDrive/Customer Engagement/tivo_case.csv")
# Convert 'Annual Income (x1000 $)' and 'Age' to numeric, removing non-numeric characters
tivo_data$`Annual Income (x1000 $)` <- as.numeric(gsub("[^0-9.]", "", tivo_data$`Annual Income (x1000 $)`))
library(dplyr)
tivo_data <- read.csv("C:/Users/antfe/OneDrive/Customer Engagement/tivo_case.csv")
# Convert 'Annual Income (x1000 $)' and 'Age' to numeric, removing non-numeric characters
tivo_data$`Annual Income (x1000 $)` <- as.numeric(gsub("[^0-9.]", "", tivo_data$`Annual Income (x1000 $)`))
View(tivo_data)
tivo_data <- tivo_data(,c-22)
library(dplyr)
tivo_data <- read.csv("C:/Users/antfe/OneDrive/Customer Engagement/tivo_case.csv")
tivo_data <- tivo_data[, -c(20:26)]
# Convert 'Annual Income (x1000 $)' and 'Age' to numeric, removing non-numeric characters
tivo_data$`Annual Income (x1000 $)` <- as.numeric(gsub("[^0-9.]", "", tivo_data$`Annual Income (x1000 $)`))
library(readr)
# Convert 'Annual Income (x1000 $)' and 'Age' to numeric, removing non-numeric characters
tivo_data$`Annual Income (x1000 $)` <- as.numeric(gsub("[^0-9.]", "", tivo_data$`Annual Income (x1000 $)`))
library(dplyr)
# Assuming tivo_data is already loaded and cleaned
# Define the segments
tivo_data$Age_Group <- cut(tivo_data$Age, breaks=c(18, 35, 50, Inf), labels=c("Young Adults", "Middle Aged", "Seniors"), right=FALSE)
tivo_data <- tivo_data[-c(1),]
# Define the segments
tivo_data$Age_Group <- cut(tivo_data$Age, breaks=c(18, 35, 50, Inf), labels=c("Young Adults", "Middle Aged", "Seniors"), right=FALSE)
summary(tivo_data)
library(dplyr)
# Load data if not already loaded
# tivo_data <- read.csv("path_to_your_file.csv")
# Convert 'Annual.Income..x1000...' and 'Age' to numeric
tivo_data$Annual.Income..x1000... <- as.numeric(gsub("[^0-9.]", "", tivo_data$Annual.Income..x1000..., fixed=TRUE))
tivo_data$Age <- as.numeric(gsub("[^0-9]", "", tivo_data$Age, fixed=TRUE))
# Convert other relevant fields to factors if categorical analysis is needed
tivo_data$Gender <- as.factor(tivo_data$Gender)
tivo_data$Marital.Status <- as.factor(tivo_data$Marital.Status)
tivo_data$Education <- as.factor(tivo_data$Education)
tivo_data$Work.Status <- as.factor(tivo_data$Work.Status)
tivo_data$Technology.Adoption <- as.factor(tivo_data$Technology.Adoption)
# Check for and handle NA values
summary(tivo_data)  # Recheck the summary to understand where NA's might be
# Example: Impute missing Age with median Age
median_age <- median(tivo_data$Age, na.rm = TRUE)
tivo_data$Age[is.na(tivo_data$Age)] <- median_age
# Re-check the structure after conversions
str(tivo_data)
library(dplyr)
# Define the segments
tivo_data$Purchasing_Frequency_Group <- cut(tivo_data$`Purchasing Frequency (every x months)`, breaks=c(0, 3, 6, Inf), labels=c("Frequent", "Moderate", "Rare"), right=FALSE)
library(dplyr)
library(readr)
data <- read.csv("C:/Users/antfe/OneDrive/Customer Engagement/tivo_case.csv")
# Remove columns 20 to 26
data_cleaned <- data %>%
select(-c(20:26))
# Convert the 'Age' column to numeric, ensuring no non-numeric values
data_cleaned$Age <- as.numeric(data_cleaned$Age)
# Clean the data: remove rows with missing Age, Annual Income, or Annual Spending on Electronics
data_cleaned <- data_cleaned %>%
filter(!is.na(Age) & !is.na(`Annual.Income..x1000...`) & !is.na(`Annual.Spending.on.Electronics`))
# Convert necessary columns to numeric
data_cleaned$`Annual.Income..x1000...` <- as.numeric(data_cleaned$`Annual.Income..x1000...`)
data_cleaned$`Annual.Spending.on.Electronics` <- as.numeric(data_cleaned$`Annual.Spending.on.Electronics`)
# Create Segment 1: Income and Spending Behavior
income_bins <- c(0, 30, 60, 100, Inf)
income_labels <- c("Low Income", "Medium Income", "High Income", "Very High Income")
spending_bins <- c(0, 200, 500, 1000, Inf)
spending_labels <- c("Low Spending", "Medium Spending", "High Spending", "Very High Spending")
data_cleaned$Income.Segment <- cut(data_cleaned$`Annual.Income..x1000...`, breaks = income_bins, labels = income_labels)
data_cleaned$Spending.Segment <- cut(data_cleaned$`Annual.Spending.on.Electronics`, breaks = spending_bins, labels = spending_labels)
data_cleaned$Segment.1 <- paste(data_cleaned$Income.Segment, data_cleaned$Spending.Segment, sep = " - ")
# Create Segment 2: Age and Spending Behavior
age_bins <- c(18, 30, 45, 60, 100)  # 4 intervals, one for each label
age_labels <- c("Young", "Middle-Aged", "Older", "Senior")  # 4 labels
# Ensure that the number of age bins and labels match
data_cleaned$Age.Segment <- cut(data_cleaned$Age, breaks = age_bins, labels = age_labels, right = FALSE)
data_cleaned$Segment.2 <- paste(data_cleaned$Age.Segment, data_cleaned$Spending.Segment, sep = " - ")
# Calculate Market Size and Average Values
segment_1_summary <- data_cleaned %>%
group_by(Segment.1) %>%
summarise(
count = n(),
percentage = (n() / nrow(data_cleaned)) * 100,
avg_income = mean(`Annual.Income..x1000...`, na.rm = TRUE),
avg_spending = mean(`Annual.Spending.on.Electronics`, na.rm = TRUE)
)
segment_2_summary <- data_cleaned %>%
group_by(Segment.2) %>%
summarise(
count = n(),
percentage = (n() / nrow(data_cleaned)) * 100,
avg_income = mean(`Annual.Income..x1000...`, na.rm = TRUE),
avg_spending = mean(`Annual.Spending.on.Electronics`, na.rm = TRUE)
)
# View summaries
print(segment_1_summary)
print(segment_2_summary)
View(data)
summary(data)
promotion <- read.csv("reds_wheelhouse_edw_nd_promotions.csv")
status <- read.csv("reds_wheelhouse_edw_nd_account_status.csv")
buyer_type <- readxl::read_xlsx("reds_wheelhouse_edw_nd_buyer_types.xlsx")
demographic <- read.csv("reds_wheelhouse_edw_nd_demographics.csv")
ticket_sales <- read.csv("reds_wheelhouse_edw_nd_ticket_sales_3.csv")
example <- read.csv("reds_wheelhouse_edw_nd_example_account.csv")
library(dplyr)
promotion_clean <- promotion %>%
group_by(EVENT_NAME) %>%
summarise(
EVENT_TIME = first(EVENT_TIME),
EVENT_DAY = first(EVENT_DAY),
CATEGORY = paste(unique(CATEGORY), collapse = " | "),
CATEGORY_DETAIL = paste(unique(CATEGORY_DETAIL), collapse = " | "),
PROMOTION = paste(unique(PROMOTION), collapse = " | ")
)
library(dplyr)
# Combine promotion rows by EVENT_NAME (in case of duplicates)
promotion_combined <- promotion %>%
group_by(EVENT_NAME) %>%
summarise(ticket_sales = paste(unique(CATEGORY), collapse = " | "), .groups = "drop")
# Join with sales data
sales_df <- ticket_sales %>%
left_join(promotion_combined, by = "EVENT_NAME")
sales_df <- sales_df %>%
mutate(ticket_sales = ifelse(is.na(ticket_sales), "No Promotion", ticket_sales))
sum(sales_df$ticket_sales == "Bobblehead")
View(demographic)
library(dplyr)
# Count the number of entries for each EVENT_NAME
event_counts <- ticket_sales %>%
group_by(EVENT_NAME) %>%
summarise(total_entries = n()) %>%
arrange(desc(total_entries))  # Sort in descending order
# View the top event(s)
head(event_counts)
# Join with sales data
event_counts <- event_counts %>%
left_join(promotion_combined, by = "EVENT_NAME")
event_counts <- event_counts[,-3]
promotion <- promotion %>%
mutate(has_bobble = ifelse(grepl("bobble", PROMOTION, ignore.case = TRUE), 1, 0))
promotion_combined <- promotion %>%
mutate(has_bobble = ifelse(grepl("bobble", PROMOTION, ignore.case = TRUE), 1, 0)) %>%
group_by(EVENT_NAME) %>%
summarise(
ticket_sales = paste(unique(CATEGORY), collapse = " | "),
has_bobble = as.integer(any(has_bobble == 1)),
.groups = "drop"
)
library(dplyr)
# Step 1: Count how many times each ACCOUNT_KEY appears in ticket_sales
account_counts <- ticket_sales %>%
group_by(ACCOUNT_KEY) %>%
summarise(sales_count = n(), .groups = "drop")
# Step 2: Join that count back to the demographics dataset
demographic_count <- demographic %>%
left_join(account_counts, by = "ACCOUNT_KEY") %>%
mutate(sales_count = ifelse(is.na(sales_count), 0, sales_count))  # Fill NAs with 0
gc()
setwd("~/GitHub/Momentum-in-the-MLB")
# Install only if not already installed
install.packages("devtools")
devtools::install_github("billpetti/baseballr")
install.packages("devtools")
library(baseballr)
library(dplyr)
get_statcast_season <- function(year) {
all_data <- data.frame()
months <- list(
c("03-20", "03-31"), # Some seasons start in late March
c("04-01", "04-30"),
c("05-01", "05-31"),
c("06-01", "06-30"),
c("07-01", "07-31"),
c("08-01", "08-31"),
c("09-01", "09-30"),
c("10-01", "10-15")  # Include some postseason overlap if needed
)
for (m in months) {
start_date <- paste0(year, "-", m[1])
end_date <- paste0(year, "-", m[2])
message(paste("Pulling", start_date, "to", end_date))
tryCatch({
chunk <- statcast_search(start_date = start_date,
end_date = end_date,
player_type = 'batter')
all_data <- bind_rows(all_data, chunk)
}, error = function(e) {
message(paste("Error with", start_date, "-", end_date))
})
}
return(all_data)
}
statcast_2020 <- get_statcast_season(2020)
devtools::install_github("billpetti/baseballr")
library(baseballr)
library(dplyr)
# Load Statcast data for a given year
data_2020 <- load_statcast(start_date = "2020-07-23", end_date = "2020-09-27") # COVID-shortened season
# Load Statcast data for a given year
data_2020 <- load_statcast(start_date = "2020-07-23", end_date = "2020-09-27") # COVID-shortened season
library(baseballr)
library(dplyr)
library(purrr)
library(lubridate)
# Function to get data safely
get_statcast_data <- function(start_date, end_date) {
tryCatch({
message(paste("Pulling:", start_date, "to", end_date))
statcast_search(start_date = start_date,
end_date = end_date,
player_type = "batter")
}, error = function(e) {
message(paste("Error:", e$message))
return(NULL)
})
}
# Create date ranges for each season
get_monthly_ranges <- function(year) {
starts <- c("03-20", "04-01", "05-01", "06-01", "07-01", "08-01", "09-01", "10-01")
ends   <- c("03-31", "04-30", "05-31", "06-30", "07-31", "08-31", "09-30", "10-15")
if (year == 2020) {  # COVID shortened season
starts <- c("07-23", "08-01", "09-01")
ends   <- c("07-31", "08-31", "09-27")
}
tibble(
start = paste0(year, "-", starts),
end = paste0(year, "-", ends)
)
}
# Main loop to download and save data
for (year in 2020:2024) {
message(paste("Starting year:", year))
date_ranges <- get_monthly_ranges(year)
year_data <- map2_dfr(date_ranges$start, date_ranges$end, get_statcast_data)
saveRDS(year_data, paste0("statcast_", year, ".rds"))
message(paste("Saved statcast_", year, ".rds"))
}
View(date_ranges)
# Main loop to download and save data
for (year in 2020:2020) {
message(paste("Starting year:", year))
date_ranges <- get_monthly_ranges(year)
year_data <- map2_dfr(date_ranges$start, date_ranges$end, get_statcast_data)
saveRDS(year_data, paste0("statcast_", year, ".rds"))
message(paste("Saved statcast_", year, ".rds"))
}
# Load required packages
install.packages("data.table")  # Only run if needed
install.packages("data.table")
library(data.table)
library(dplyr)
library(purrr)
# Function to safely pull Statcast data from Baseball Savant
get_statcast_data_v2 <- function(start_date, end_date) {
base_url <- "https://baseballsavant.mlb.com/statcast_search/csv?all=true"
url <- paste0(
base_url,
"&hfPT=&hfAB=&hfBBT=&hfPR=&hfZ=&stadium=&hfBBL=&hfNewZones=&hfGT=R%7CPO%7CS%7C",
"&hfC&hfSea=&hfSit=&hfOuts=&opponent=&pitcher_throws=&batter_stands=",
"&hfSA=&player_type=batter&hfInfield=&team=&position=&hfOutfield=",
"&hfRO=&home_road=&game_date_gt=", start_date,
"&game_date_lt=", end_date,
"&hfFlag=&hfPull=&metric_1=&hfInn=&min_pitches=0&min_results=0",
"&group_by=name&sort_col=pitches&player_event_sort=h_launch_speed",
"&sort_order=desc&min_abs=0&type=details"
)
message(paste("Downloading:", start_date, "to", end_date))
tryCatch({
df <- fread(url, showProgress = FALSE, fill = TRUE)
df
}, error = function(e) {
message(paste("Failed:", e$message))
return(NULL)
})
}
# Create date ranges for COVID-shortened 2020 season
get_monthly_ranges_2020 <- function() {
tibble(
start = c("2020-07-23", "2020-08-01", "2020-09-01"),
end   = c("2020-07-31", "2020-08-31", "2020-09-27")
)
}
# Download and combine 2020 Statcast data
date_ranges_2020 <- get_monthly_ranges_2020()
statcast_2020 <- map2_dfr(date_ranges_2020$start, date_ranges_2020$end, get_statcast_data_v2)
View(statcast_2020)
summary(statcast_2020)
#summary(statcast_2020)
cols_to_keep <- c(
"game_pk",             # Game ID
"game_date",           # Date of game
"at_bat_number",       # Sequential number of PA in game
"inning",              # Inning
"inning_topbot",       # Top or Bottom of inning
"batter",              # Batter ID
"player_name",         # Batter name
"events",              # Event result (e.g. 'single', 'groundout')
"description",         # Useful for identifying completed PAs
"home_team",           # Home team
"away_team",           # Away team
"bat_score",           # Score at the time
"post_bat_score",      # Score after PA
"home_score", "away_score", # Full context
"pitch_number"         # Needed to make sure we're only using the final pitch of the PA
)
statcast_2020_clean <- statcast_2020 %>%
select(all_of(cols_to_keep)) %>%
filter(!is.na(events))  # Remove non-PA rows (e.g. pickoffs, warmups)
# Check result
glimpse(statcast_2020_clean)
View(statcast_2020_clean)
# Keep only the final pitch of each at-bat (where event is not NA and last pitch_number per at_bat)
library(dplyr)
statcast_pa_2020 <- statcast_2020_clean %>%
filter(!is.na(events), events != "") %>%
group_by(game_pk, at_bat_number) %>%
filter(pitch_number == max(pitch_number)) %>%
ungroup()
# Sort by game, inning, top/bot, and at-bat
statcast_pa_2020 <- statcast_pa_2020 %>%
arrange(game_pk, inning, inning_topbot, at_bat_number) %>%
group_by(game_pk, inning, inning_topbot) %>%
mutate(
prev_event = lag(events),
prev_batter = lag(batter),
momentum = ifelse(prev_event %in% c("single", "double", "triple", "home_run"), 1, 0)
) %>%
ungroup()
# Calculate batting average with vs. without momentum
momentum_ba <- statcast_pa_2020 %>%
filter(events %in% c("single", "double", "triple", "home_run", "field_out", "strikeout", "grounded_into_double_play")) %>%
mutate(hit = ifelse(events %in% c("single", "double", "triple", "home_run"), 1, 0)) %>%
group_by(momentum) %>%
summarise(
PA = n(),
Hits = sum(hit),
Batting_Average = mean(hit)
)
print(momentum_ba)
unique(statcast_2020$events)
# Sort by game, inning, top/bot, and at-bat
statcast_pa_2020 <- statcast_pa_2020 %>%
arrange(game_pk, inning, inning_topbot, at_bat_number) %>%
group_by(game_pk, inning, inning_topbot) %>%
mutate(
prev_event = lag(events),
prev_batter = lag(batter),
momentum = ifelse(prev_event %in% c("single", "double", "triple", "home_run", "sac_fly"), 1, 0)
) %>%
ungroup()
# Calculate batting average with vs. without momentum
momentum_ba <- statcast_pa_2020 %>%
filter(events %in% c("single", "double", "triple", "home_run", "field_out", "strikeout", "grounded_into_double_play")) %>%
mutate(hit = ifelse(events %in% c("single", "double", "triple", "home_run"), 1, 0)) %>%
group_by(momentum) %>%
summarise(
PA = n(),
Hits = sum(hit),
Batting_Average = mean(hit)
)
print(momentum_ba)
View(statcast_pa_2020)
# Sort by game, inning, top/bot, and at-bat
statcast_pa_2020 <- statcast_pa_2020 %>%
arrange(game_pk, inning, inning_topbot, at_bat_number) %>%
group_by(game_pk, inning, inning_topbot) %>%
mutate(
prev_event = lag(events),
prev_batter = lag(batter),
momentum = ifelse(prev_event %in% c("single", "double", "triple", "home_run"), 1, 0)
) %>%
ungroup()
# Calculate batting average with vs. without momentum
momentum_ba <- statcast_pa_2020 %>%
filter(events %in% c("single", "double", "triple", "home_run", "field_out", "strikeout", "grounded_into_double_play")) %>%
mutate(hit = ifelse(events %in% c("single", "double", "triple", "home_run"), 1, 0)) %>%
group_by(momentum) %>%
summarise(
PA = n(),
Hits = sum(hit),
Batting_Average = mean(hit)
)
print(momentum_ba)
# Sort by game, inning, top/bot, and at-bat
statcast_pa_2020 <- statcast_pa_2020 %>%
arrange(game_pk, inning, inning_topbot, at_bat_number) %>%
group_by(game_pk, inning, inning_topbot) %>%
mutate(
prev_event = lag(events),
prev_batter = lag(batter),
momentum = ifelse(prev_event %in% c("single", "double", "triple", "home_run", "sac_fly"), 1, 0)
) %>%
ungroup()
# Calculate batting average with vs. without momentum
momentum_ba <- statcast_pa_2020 %>%
filter(events %in% c("single", "double", "triple", "home_run", "field_out", "strikeout", "grounded_into_double_play")) %>%
mutate(hit = ifelse(events %in% c("single", "double", "triple", "home_run"), 1, 0)) %>%
group_by(momentum) %>%
summarise(
PA = n(),
Hits = sum(hit),
Batting_Average = mean(hit)
)
print(momentum_ba)
View(momentum_ba)
statcast_pa_2020 <- statcast_pa_2020 %>%
mutate(batting_team = ifelse(inning_topbot == "Top", away_team, home_team))
statcast_pa_2020 <- statcast_pa_2020 %>%
mutate(batting_team = ifelse(inning_topbot == "Top", away_team, home_team))
statcast_pa_2020 <- statcast_pa_2020 %>%
mutate(hit = ifelse(events %in% c("single", "double", "triple", "home_run"), 1, 0))
library(dplyr)
team_momentum_ba <- statcast_pa_2020 %>%
filter(events %in% c("single", "double", "triple", "home_run",
"field_out", "strikeout", "grounded_into_double_play")) %>%
group_by(batting_team, momentum) %>%
summarise(
PA = n(),
Hits = sum(hit),
Batting_Average = mean(hit),
.groups = "drop"
)
library(tidyr)
team_comparison <- team_momentum_ba %>%
pivot_wider(
names_from = momentum,
values_from = c(PA, Hits, Batting_Average),
names_prefix = "momentum_"
) %>%
mutate(
BA_Difference = Batting_Average_momentum_1 - Batting_Average_momentum_0
) %>%
arrange(desc(BA_Difference))
# View top teams by momentum boost
print(team_comparison)
View(team_comparison)
library(dplyr)
team_momentum_ba <- statcast_pa_2020 %>%
filter(events %in% c(
"single", "double", "triple", "home_run",
"field_out", "strikeout", "grounded_into_double_play",
"double_play", "strikeout_double_play",
"fielders_choice", "force_out"
)) %>%
group_by(batting_team, momentum) %>%
summarise(
PA = n(),
Hits = sum(hit),
Batting_Average = mean(hit),
.groups = "drop"
)
library(tidyr)
team_comparison <- team_momentum_ba %>%
pivot_wider(
names_from = momentum,
values_from = c(PA, Hits, Batting_Average),
names_prefix = "momentum_"
) %>%
mutate(
BA_Difference = Batting_Average_momentum_1 - Batting_Average_momentum_0
) %>%
arrange(desc(BA_Difference))
# View top teams by momentum boost
print(team_comparison)
# Filter valid at-bats and create the hit column
valid_pas <- statcast_pa_2020 %>%
filter(events %in% c(
"single", "double", "triple", "home_run",
"field_out", "strikeout", "grounded_into_double_play",
"double_play", "strikeout_double_play",
"fielders_choice", "force_out"
)) %>%
mutate(hit = ifelse(events %in% c("single", "double", "triple", "home_run"), 1, 0))
# Run the t-test
t_test_result <- t.test(hit ~ momentum, data = valid_pas)
print(t_test_result)
library(ggplot2)
ggplot(team_comparison, aes(x = reorder(batting_team, BA_Difference), y = BA_Difference)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(
title = "Batting Average Difference with Momentum (2020)",
subtitle = "Momentum defined as previous batter got a hit or sac fly",
x = "Team",
y = "BA with Momentum - BA without Momentum"
) +
theme_minimal()
library(ggplot2)
ggplot(team_comparison, aes(x = reorder(batting_team, BA_Difference), y = BA_Difference, fill = BA_Difference > 0)) +
geom_col(width = 0.7, color = "white", show.legend = FALSE) +
scale_fill_manual(values = c("FALSE" = "#e74c3c", "TRUE" = "#2ecc71")) +  # red for negative, green for positive
geom_text(aes(label = sprintf("%.3f", BA_Difference)), hjust = ifelse(team_comparison$BA_Difference > 0, -0.15, 1.1),
size = 3.5, color = "black") +
coord_flip() +
labs(
title = "Which Teams Ride the Momentum?",
subtitle = "Difference in Batting Average When Previous Batter Got a Hit or Sac Fly (2020)",
x = "Team",
y = "Momentum Batting Avg. Difference"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(color = "gray30", size = 12),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_text(face = "bold")
) +
xlim(c(levels(reorder(team_comparison$batting_team, team_comparison$BA_Difference)), NA))
View(team_comparison)
